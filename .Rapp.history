g2.idx <- 3  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 7  # group idx for plotting beta_j#
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 3  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 8  # group idx for plotting beta_j#
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 3  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 9  # group idx for plotting beta_j#
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 3  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 10  # group idx for plotting beta_j
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 3  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g2.idx <- 1  # group idx for plotting beta_j
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 11  # group idx for plotting beta_j#
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 1  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
g1.idx <- 12  # group idx for plotting beta_j#
matplot(out1$beta[,,g1.idx],type="l",lty=1);abline(h=beta[,g1.idx],col=1:qX,lty=2)
g2.idx <- 1  # group idx for plotting beta_j#
matplot(out1$alpha[[g1.idx]][,,g2.idx],type="l",lty=1)#
abline(h=alpha[[g1.idx]][,g2.idx],col=1:qX,lty=2)
matplot(cbind(out1$Sigma.alpha[[g1.idx]][1,1,],out1$Sigma.alpha[[g1.idx]][1,2,]),type="l")#
abline(h=c(Sigma.alpha[[g1.idx]][1,1],Sigma.alpha[[g1.idx]][1,2]),lty=2,col=1:qX)
matplot(out1$mu.beta,type="l");abline(h=mu.beta,col=1:qX,lty=2)
matplot(cbind(out1$Sigma.beta[1,1,],out1$Sigma.beta[1,2,]),type="l")#
abline(h=c(Sigma.beta[1,1],Sigma.beta[1,2]),lty=2,col=1:qX)
rm(list=ls())#
#
library(mvtnorm)#
#
logit <- function(x){#
	log(x/(1-x))#
}#
#
expit <- function(x){#
	exp(x)/(1+exp(x))#
}#
I <- 12  # number of groups#
J <- 5  # number subgroups within each group#
K <- 5  # number of events per subgroup#
N <- 200  # number of trials per event#
N <- rep(N,each=I*J*K)  # replicate over groups, subgroups, and events#
#
g1 <- rep(1:I,each=J*K)  # level 1 grouping variable (groups, indexing I)#
g2 <- rep(rep(1:J,each=K),I)  # level 2 grouping variable (subgroups, indexing J)#
cbind(g1,g2)
mu.beta <- matrix(c(-0.5,1),,1)  # mean of betas#
qX <- nrow(mu.beta)#
rho <- -0.15  # correlation between betas#
Sigma.beta <- diag(qX)*0.75  # variance-covariance of betas#
Sigma.beta[1,2] <- Sigma.beta[2,1] <- Sigma.beta[1,1]*Sigma.beta[2,2]*rho#
#
###########################################################
### Simulate group-level process model parameters#
###########################################################
#
beta <- t(rmvnorm(I,mu.beta,Sigma.beta))  # betas for each group#
plot(t(beta))#
#
###########################################################
### Simulate subgroup-level process model parameters#
###########################################################
#
Sigma.alpha <- diag(qX)*0.25  # variance-covariance of betas#
Sigma.alpha[1,2] <- Sigma.alpha[2,1] <- Sigma.alpha[1,1]*Sigma.alpha[2,2]*rho#
Sigma.alpha <- lapply(1:I,function(x) Sigma.alpha)#
alpha <- lapply(1:I,function(x) t(rmvnorm(J,beta[,x],Sigma.alpha[[x]])))#
	# coefficients for each subgroup#
#
###########################################################
### Simulate count data#
###########################################################
#
X <- cbind(1,rnorm(I*J*K,0,sd=1))  # design matrix#
p <- numeric(I*J*K)#
for(i in 1:length(p)){#
	p[i] <- expit(t(X[i,])%*%alpha[[g1[i]]][,g2[i]])#
}#
#
z <- rbinom(J*I*K,N,p)  # successes per event#
hist(z)#
#
###########################################################
### Fit model#
###########################################################
#
source('~/Documents/git/Multilevel/nested/binomial/binomial.varying.coef.3.mcmc.R')#
start <- list(beta=beta,mu.beta=mu.beta,alpha=alpha,Sigma.beta=Sigma.beta,Sigma.alpha=Sigma.alpha)#
priors <- list(sigma.mu.beta=5,S0=diag(qX),nu=qX+1)#
tune <- list(alpha=lapply(1:I,function(x) rep(0.35,J)))#
# tune <- list(beta=out1$tune$beta)#
out1 <- binomial.varying.coef.3.mcmc(z,N,X,g1,g2,priors,start,tune,adapt=TRUE,10000)
rm(list=ls())
n <- 1000  # number of obserations to simulate#
X <- cbind(1,rnorm(n))  # design matrix#
qX <- ncol(X)#
beta <- c(-2,3)  # coefficients#
#
p <- 0.5  # probability of false zero#
z <- rbinom(n,1,p)  # latent variable indicating mixture component#
#
y <- numeric(n)#
lambda <- exp(X[z==1,]%*%beta)  # intensity of Poisson process#
y[z==1] <- rpois(sum(z==1),lambda)  # observed counts
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,alpha=1,beta=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
apply(out1$z,2,mean)
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,alpha=1,beta=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
z
apply(out1$z,2,mean)
boxplot(z,apply(out1$z,1,mean))
boxplot(z,apply(out1$z,2,mean))
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)#
plot(out1$p,type="l");abline(h=p,lty=3)#
boxplot(z,apply(out1$z,2,mean))
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,alpha=1,beta=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
n.y0
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
mh.0 <- sum(log(dpois(y[z==1],lambda[z==1])+sum(z==0)))+#
  			sum(dnorm(beta,mu.beta,sigma.beta,log=TRUE))
mh.star <- sum(log(dpois(y[z==1],lambda.star[z==1])+sum(z==0)))+#
  			sum(dnorm(beta.star,mu.beta,sigma.beta,log=TRUE))
exp(mh.star-mh.0)
mh.0 <- sum(z*dpois(y,lambda,log=TRUE))+#
			sum(dnorm(beta,mu.beta,sigma.beta,log=TRUE))
mh.star <- sum(z*dpois(y,lambda.star,log=TRUE))+#
			sum(dnorm(beta.star,mu.beta,sigma.beta,log=TRUE))
exp(mh.star-mh.0)
beta
beta.star
Q
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
p.tmp
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
z
y
y <- numeric(n)
y
lambda <- exp(X[z==1,]%*%beta)  # intensity of Poisson process
lambda
y[z==1]
rpois(sum(z==1),lambda)
y[z==1] <- rpois(sum(z==1),lambda)  # observed counts
y
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=50000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
z
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
out1$tune
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
z
apply(out1$z,2,mean)
plot(z,apply(out1$z,2,mean))
boxplot(z,apply(out1$z,2,mean))
boxplot(z~apply(out1$z,2,mean))
boxplot(z,apply(out1$z,2,mean))
plot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z)
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
boxplot(z~apply(out1$z,2,mean))
boxplot(z,apply(out1$z,2,mean))
boxplot(apply(out1$z,2,mean),z)
boxplot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
apply(out1$beta,2,mean)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
z
X
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
start <- list(beta=beta,p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
apply(out1$beta,2,mean)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
quit()
rm(list=ls())#
#
###########################################################
### Simulate data for zero-inflated Poisson GLM#
###########################################################
#
n <- 1000  # number of obserations to simulate#
X <- cbind(1,rnorm(n))  # design matrix#
qX <- ncol(X)#
beta <- c(-2,3)  # coefficients#
#
p <- 0.5  # probability of false zero#
z <- rbinom(n,1,p)  # latent variable indicating mixture component#
#
y <- numeric(n)#
lambda <- exp(X[z==1,]%*%beta)  # intensity of Poisson process#
y[z==1] <- rpois(sum(z==1),lambda)  # observed counts
source('~/Documents/git/GLM/poisson/zip.glm.mcmc.R')#
priors <- list(sigma.beta=5,a=1,b=1)#
tune <- list(beta=0.25)#
start <- list(beta=coef(glm(z ~ 0+X, family=poisson())),p=p,z=z)#
start <- list(beta=beta,p=p,z=z)#
out1 <- zip.glm.mcmc(z,X,priors,start,tune,n.mcmc=5000)
matplot(out1$beta, type="l", lty=1);abline(h=beta,col=1:qX,lty=3)
plot(out1$p,type="l");abline(h=p,lty=3)
boxplot(z,apply(out1$z,2,mean))
plot(apply(out1$z,2,mean),z,xlim=c(0,1))
quit()
60*52
3120*0.06
3120*0.03
12000*0.01
2.5*5*1.75
3.25*3.75*7
25*15*12
rm(list=ls())#
library(sp)#
library(raster)#
library(rgeos)#
library(mvtnorm)#
setwd("~/Documents/git/Constraints")#
ls()
S <- SpatialPoints(matrix(runif(20,min=0.2,max=0.8),ncol=2))#
S <- gBuffer(S,byid=TRUE,width=0.05)#
S <- gUnaryUnion(S)#
plot(S)
?Lines
SpatialLines(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2)))
Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))
Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)
SpatialLines(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1))
SpatialLines(list(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)))
S <- SpatialLines(list(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)))
plot(S)
S <- SpatialLines(list(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)))#
# S <- SpatialPoints(matrix(runif(20,min=0.2,max=0.8),ncol=2))#
S <- gBuffer(S,byid=TRUE,width=0.05)
plot(S)
S <- SpatialLines(list(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)))#
# S <- SpatialPoints(matrix(runif(20,min=0.2,max=0.8),ncol=2))#
S <- gBuffer(S,byid=TRUE,width=0.05)#
# S <- gUnaryUnion(S)#
plot(S)
S <- SpatialLines(list(Lines(list(Line(matrix(runif(20,min=0.2,max=0.8),ncol=2))),1)))#
# S <- SpatialPoints(matrix(runif(20,min=0.2,max=0.8),ncol=2))#
S <- gBuffer(S,byid=TRUE,width=0.05)#
# S <- gUnaryUnion(S)#
plot(S)
S <- rasterize(S,raster(xmn=0,xmx=1,ymn=0,ymx=1,res=0.005))#
plot(S)
T <- 1000  # number of locations#
idx <- which(values(S)==1)#
mu <- SpatialPoints(xyFromCell(S,sample(idx,T,replace=TRUE)))#
points(mu,pch=3,cex=0.25,col=rgb(0,0,0,0.25))
sigma <- c(0.01,0.05,0.1)#
a <- c(0.9,0.75,0.5)#
rho <- c(0,0.2,0.5)#
nu <- c(30,10,2)#
#
# Simulate complex telemetry error#
s <- mu#
s$lc <- sample(3,T,replace=TRUE)  # define error class (e.g., Argos location quality)
for(i in unique(s$lc)){#
	Sigma <- sigma[i]^2*matrix(c(1,sqrt(a[i])*rho[i],sqrt(a[i])*rho[i],a[i]),2)#
	Sigma.tilde <- matrix(c(-1,0,0,1),2)%*%Sigma%*%t(matrix(c(-1,0,0,1),2))#
	idx <- which(s$lc==i)#
	n <- length(idx)#
	t.idx <- rbinom(n,1,prob=0.5)  # index for mixture component#
	s@coords[idx[t.idx==0],] <- s@coords[idx[t.idx==0],]+rmvt(n-sum(t.idx),Sigma,nu[i])#
	s@coords[idx[t.idx==1],] <- s@coords[idx[t.idx==1],]+rmvt(sum(t.idx),Sigma,nu[i])#
}
plot(S,col="gray85")#
points(mu,pch=3,cex=0.5,col=s$lc)#
points(s,col=s$lc,cex=0.75)#
segments(mu@coords[,1],mu@coords[,2],s@coords[,1],s@coords[,2],s$lc,lwd=0.5)
priors <-  list(sigma=c(0,1),a=c(0,1),rho=c(0,1),nu=c(0,100))  # prior distribution parameters#
tune <- list(sigma=c(0.0009,0.003,0.008),rho=c(0.2,0.1,0.18),a=c(0.11,0.09,0.13),nu=rep(130,3),#
	mu=c(0.01,0.03,0.07))  # tuning parameters#
start <- list(mu=mu@coords,sigma=sigma,a=a,rho=rho,nu=nu)  # starting values
source("constraints.mcmc.R")#
out1 <- constraints.mcmc(s,S,priors,start,tune,n.mcmc=10000,adapt=TRUE)
keep.tmp
lapply(keep.tmp,function(x) x/T.lc)
keep.tmp <- lapply(keep.tmp,function(x) x/T.lc)
Q
source("constraints.mcmc.R")#
out1 <- constraints.mcmc(s,S,priors,start,tune,n.mcmc=10000,adapt=TRUE)
mod <- out1
mod$keep
mod$tune
out2 <- constraints.mcmc(s,S,priors,out1$end,out1$tune,n.mcmc=10000,adapt=TRUE)
out3 <- constraints.mcmc(s,S,priors,out2$end,out2$tune,n.mcmc=10000,adapt=TRUE)
mod <- out3
mod$keep
mod$tune
matplot(mod$sigma,type="l",lty=1);abline(h=sigma,col=1:5,lty=3)
matplot(mod$a,type="l",lty=1);abline(h=a,col=1:5,lty=3)
matplot(mod$rho,type="l",lty=1);abline(h=rho,col=1:5,lty=3)
matplot(mod$nu,type="l",lty=1);abline(h=nu,col=1:5,lty=3)
idx <- 9#
s$lc[idx]#
image(S,col="gray85")
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 1#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 2#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 3#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 4#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 5#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
source("constraints.mcmc.R")
source("constraints.mcmc.R")
out1 <- constraints.mcmc(s,S,priors,start,tune,n.mcmc=10000,adapt=TRUE)
mu.star
rnorm(T.tmp,mu.tmp,tune$mu[i])
rnorm(6,1:6,tune$mu[i])
matrix(rnorm(6,1:6,tune$mu[i]),6,2,byrow=TRUE)
matrix(rnorm(6,1:6,tune$mu[i]),3,2,byrow=TRUE)
mu.star[lc.idx,] <- matrix(rnorm(T.tmp,mu.tmp,tun$mu[i]),T.tmp,2,byrow=TRUE)
mu.star[lc.idx,] <- matrix(rnorm(T.tmp,mu.tmp,tune$mu[i]),T.tmp,2,byrow=TRUE)
cbind(mu.tmp,mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp,mu.tmp,tune$mu[i]*0.1),T.tmp,2,byrow=TRUE)
cbind(mu.tmp,mu.star[lc.idx,])
tune$mu[i]*0.1
matrix(rnorm(T.tmp,mu.tmp,tune$mu[i]*0),T.tmp,2,byrow=TRUE)
mu.star[lc.idx,] <- matrix(rnorm(T.tmp,mu.tmp,tune$mu[i]*0),T.tmp,2,byrow=TRUE)
cbind(mu.tmp,mu.star[lc.idx,])
cbind(mu[lc.idx,],mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,mu.tmp,tune$mu[i]*0),T.tmp,2,byrow=TRUE)
cbind(mu[lc.idx,],mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,c(mu.tmp),tune$mu[i]*0),T.tmp,2,byrow=TRUE)
cbind(mu[lc.idx,],mu.star[lc.idx,])
c(mu.tmp)
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,c(mu.tmp),tune$mu[i]*0),T.tmp,2,byrow=FALSE)
cbind(mu[lc.idx,],mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,mu.tmp,tune$mu[i]*0),T.tmp,2,byrow=FALSE)
cbind(mu[lc.idx,],mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,mu.tmp,tune$mu[i]*0),T.tmp,2)
cbind(mu[lc.idx,],mu.star[lc.idx,])
cbind(mu.tmp,mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,mu.tmp,tune$mu[i]*0),T.tmp,2)
cbind(mu.tmp,mu.star[lc.idx,])
mu.star[lc.idx,] <- matrix(rnorm(T.tmp*2,mu.tmp,tune$mu[i]),T.tmp,2)
cbind(mu.tmp,mu.star[lc.idx,])
Q
priors <-  list(sigma=c(0,1),a=c(0,1),rho=c(0,1),nu=c(0,100))  # prior distribution parameters#
tune <- list(sigma=c(0.001,0.005,0.013),rho=c(0.06,0.22,0.13),a=c(0.1,0.1,0.14),nu=c(51,53,0.65),#
	mu=c(0.01,0.05,0.08))  # tuning parameters#
start <- list(mu=mu@coords,sigma=sigma,a=a,rho=rho,nu=nu)  # starting values
source("constraints.mcmc.R")
out1 <- constraints.mcmc(s,S,priors,start,tune,n.mcmc=10000,adapt=TRUE)
mod <- out1
mod$keep
mod$tune
matplot(mod$sigma,type="l",lty=1);abline(h=sigma,col=1:5,lty=3)
matplot(mod$a,type="l",lty=1);abline(h=a,col=1:5,lty=3)
matplot(mod$rho,type="l",lty=1);abline(h=rho,col=1:5,lty=3)
matplot(mod$nu,type="l",lty=1);abline(h=nu,col=1:5,lty=3)
idx <- 5#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 1#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 2#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
idx <- 3#
s$lc[idx]#
image(S,col="gray85")#
points(mod$mu[idx,1,],mod$mu[idx,2,],pch=19,col=rgb(0,0,0,0.05),cex=0.25)#
points(mu@coords[idx,1],mu@coords[idx,2],col=2,pch=3)#
points(s@coords[idx,1],s@coords[idx,2],col=3,pch=3,xpd=TRUE)
